{
"文件名": "verilog_parser.py",
"代码内容": "```python\nimport re\n\ndef parse_verilog_file(file_path):\n    with open(file_path, 'r') as file:\n        content = file.read()\n\n    # 识别模块的ports\n    module_ports_pattern = re.compile(r'\\b(input|output|inout)\\s+\\[?\\d*:\\d*\\]?\\s+\\w+\\b')\n    module_ports = module_ports_pattern.findall(content)\n\n    # 识别子模块及各个子模块的ports\n    submodule_pattern = re.compile(r'(\\w+)\\s+(\\w+)\\s*\\(\\s*(.*?)\\s*\\);', re.DOTALL)\n    submodules = []\n    for match in submodule_pattern.finditer(content):\n        submodule_name = match.group(1)\n        submodule_instance_name = match.group(2)\n        submodule_ports = match.group(3).strip().split(',')\n        submodule_ports = [port.strip().split() for port in submodule_ports]\n        submodules.append({\n            'name': submodule_name,\n            'instance_name': submodule_instance_name,\n            'ports': dict(submodule_ports)\n        })\n\n    # 生成各个子模块的IO连接情况\n    io_connections = []\n    for submodule in submodules:\n        for port_name, port_connection in submodule['ports'].items():\n            io_connections.append(f'{submodule["instance_name"]}.{port_name} -> {port_connection}')\n\n    return module_ports, submodules, io_connections\n\n\ndef main(file_path):\n    module_ports, submodules, io_connections = parse_verilog_file(file_path)\n    \n    print(\"模块的ports:\")\n    for port in module_ports:\n        print(port)\n    \n    print(\"\\n子模块及各个子模块的ports:\")\n    for submodule in submodules:\n        print(f'子模块名: {submodule["name"]}, 实例名: {submodule["instance_name"]}, ports: {submodule["ports"]}')\n    \n    print(\"\\n各个子模块的IO连接情况:\")\n    for connection in io_connections:\n        print(connection)\n\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.argv) != 2:\n        print(\"Usage: python3 verilog_parser.py <file_path>\")\n        sys.exit(1)\n    \n    file_path = sys.argv[1]\n    main(file_path)\n```"
}